{"ast":null,"code":"var _jsxFileName = \"/Users/Lorenzo/Desktop/Sito-Paul/src/components/products-grid/products-grid.jsx\";\nimport React from 'react';\nimport Product from \"../product/product\";\nimport PageButton from \"../pageButton/pageButton\";\nimport SHOP_DATA, { objProducts } from \"./shop.data\";\nimport \"./products-grid.scss\";\n\nclass ProductsGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderButtons = (page, numResults, resPerPage = 16) => {\n      const pages = Math.ceil(numResults / resPerPage);\n      let button;\n\n      if (page === 1 && pages > 1) {\n        //first page\n        button = /*#__PURE__*/React.createElement(PageButton, {\n          type: \"next\",\n          page: page,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 22\n          }\n        });\n      } else if (page < pages) {\n        //both buttons\n        button = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(PageButton, {\n          type: \"next\",\n          page: page,\n          onClick: page => this.setState({\n            page\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(PageButton, {\n          type: \"prev\",\n          page: page,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }\n        }));\n      } else if (page === pages && pages > 1) {\n        //last page\n        button = /*#__PURE__*/React.createElement(PageButton, {\n          type: \"prev\",\n          page: page,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 22\n          }\n        });\n      }\n\n      return button;\n    };\n\n    this.state = {\n      collections: SHOP_DATA,\n      products: objProducts,\n      page: 1\n    };\n  } //i create a new array and put every item of every collection in it\n\n\n  render() {\n    let arrayProducts = this.state.products; //if a category is selected i filter the array\n\n    if (this.props.filterProducts !== \"All\") {\n      arrayProducts = arrayProducts.filter(product => product.category === this.props.filterProducts);\n    } //if a sort option is selected i sort the array\n\n\n    if (this.props.sortProducts !== \"0\") {\n      this.props.sortProducts === \"+\" ? arrayProducts.sort((a, b) => parseFloat(b.price) - parseFloat(a.price)) : arrayProducts.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));\n    } else {\n      //if no sort i reverse the array because when add a new collection it comes last\n      arrayProducts.reverse();\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"products-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, arrayProducts.map(({\n      id,\n      ...itemProps\n    }, index) => /*#__PURE__*/React.createElement(Product, Object.assign({\n      key: index\n    }, itemProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, this.renderButtons(this.state.page, arrayProducts.length)));\n  }\n\n}\n\nexport default ProductsGrid;","map":{"version":3,"sources":["/Users/Lorenzo/Desktop/Sito-Paul/src/components/products-grid/products-grid.jsx"],"names":["React","Product","PageButton","SHOP_DATA","objProducts","ProductsGrid","Component","constructor","props","renderButtons","page","numResults","resPerPage","pages","Math","ceil","button","setState","state","collections","products","render","arrayProducts","filterProducts","filter","product","category","sortProducts","sort","a","b","parseFloat","price","reverse","map","id","itemProps","index","length"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport Product from \"../product/product\"\nimport PageButton from \"../pageButton/pageButton\"\nimport SHOP_DATA, { objProducts } from \"./shop.data\"\n\nimport \"./products-grid.scss\"\n\n\n\nclass ProductsGrid extends React.Component { \n     \n    constructor(props) {\n        super(props)\n\n        this.state = {\n            collections: SHOP_DATA,\n            products: objProducts,\n            page: 1\n        }\n    }\n\n        \n        //i create a new array and put every item of every collection in it\n\n    render() {\n        \n        let arrayProducts = this.state.products\n\n        //if a category is selected i filter the array\n        if(this.props.filterProducts !== \"All\") {\n            arrayProducts = arrayProducts.filter(product => product.category === this.props.filterProducts)           \n        }\n\n        //if a sort option is selected i sort the array\n        if(this.props.sortProducts !== \"0\") {\n            this.props.sortProducts === \"+\" ? \n            arrayProducts.sort((a, b) => parseFloat(b.price) - parseFloat(a.price)) \n            : arrayProducts.sort((a, b) => parseFloat(a.price) - parseFloat(b.price))\n        }\n        else {\n            //if no sort i reverse the array because when add a new collection it comes last\n            arrayProducts.reverse()\n        }\n\n        return (\n        <>\n            <div id=\"products-grid\">\n                { \n                     arrayProducts.map(({ id, ...itemProps }, index) => (\n                        <Product key={ index } { ...itemProps } />\n                    )) \n                }                 \n            </div>\n            <div className=\"buttons\">\n                {\n                    this.renderButtons(this.state.page, arrayProducts.length)\n                }\n            </div>\n        </>\n        )\n    }\n\n    renderButtons = (page, numResults, resPerPage = 16) => {\n        const pages = Math.ceil(numResults / resPerPage)\n        let button\n    \n        if(page === 1 && pages > 1) {\n            //first page\n            button = <PageButton type= \"next\" page={page} />\n    \n        } else if(page < pages) {\n            //both buttons\n            button = <div>\n                <PageButton type= \"next\" page={page} onClick={(page) => this.setState({page})}/>\n                <PageButton type= \"prev\" page={page} />\n            </div>\n        }\n        else if(page === pages && pages > 1) {\n            //last page\n            button = <PageButton type= \"prev\" page={page} />\n        }\n        return button\n    }\n}\n\nexport default ProductsGrid"]},"metadata":{},"sourceType":"module"}